{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('button');\nconst textEl = document.getElementById('datetime-picker');\nconst timerEl = document.querySelector('.timer');\nconst timerDaysEl = document.querySelector('[data-days]');\nconst timerHoursEl = document.querySelector('[data-hours]');\nconst timerMinutesEl = document.querySelector('[data-minutes]');\nconst timerSecondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\nlet intervalId;\nstartBtn.addEventListener('click', handleStartButtonClick);\n\nfunction handleStartButtonClick() {\n  const options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      userSelectedDate = selectedDates[0];\n      if (userSelectedDate > new Date()) {\n        startBtn.disabled = true;\n      } else {\n        startBtn.disabled = false;\n        iziToast.error({\n          title: 'Error',\n          message: 'Please choose a date in the future',\n        });\n      }\n    },\n  };\n\n  flatpickr(textEl, options);\n  const selectedDates = flatpickr.parseDate(textEl.value);\n  if (selectedDates) {\n    userSelectedDate = selectedDates;\n    handleTimer();\n    intervalId = setInterval(handleTimer, 1000);\n  }\n}\n\nfunction handleTimer() {\n  const currentTime = new Date();\n  const difference = userSelectedDate.getTime() - currentTime.getTime();\n  const { days, hours, minutes, seconds } = convertMs(difference);\n\n  timerDaysEl.textContent = formatTimeValue(days);\n  timerHoursEl.textContent = formatTimeValue(hours);\n  timerMinutesEl.textContent = formatTimeValue(minutes);\n  timerSecondsEl.textContent = formatTimeValue(seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction formatTimeValue(value) {\n  return `${value}`;\n}\n\nif (userSelectedDate) {\n  intervalId = setInterval(handleTimer, 1000);\n}\n"],"names":["startBtn","textEl","timerDaysEl","timerHoursEl","timerMinutesEl","timerSecondsEl","userSelectedDate","handleStartButtonClick","flatpickr","selectedDates","iziToast","handleTimer","currentTime","difference","days","hours","minutes","seconds","convertMs","formatTimeValue","ms","value"],"mappings":"2FAKA,MAAMA,EAAW,SAAS,cAAc,QAAQ,EAC1CC,EAAS,SAAS,eAAe,iBAAiB,EACxC,SAAS,cAAc,QAAQ,EAC/C,MAAMC,EAAc,SAAS,cAAc,aAAa,EAClDC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAiB,SAAS,cAAc,gBAAgB,EAE9D,IAAIC,EAEJN,EAAS,iBAAiB,QAASO,CAAsB,EAEzD,SAASA,GAAyB,CAoBhCC,EAAUP,EAnBM,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQQ,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAC9BH,EAAmB,IAAI,KACzBN,EAAS,SAAW,IAEpBA,EAAS,SAAW,GACpBU,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACnB,CAAS,EAEJ,CACL,CAE2B,EACzB,MAAMD,EAAgBD,EAAU,UAAUP,EAAO,KAAK,EAClDQ,IACFH,EAAmBG,EACnBE,IACa,YAAYA,EAAa,GAAI,EAE9C,CAEA,SAASA,GAAc,CACrB,MAAMC,EAAc,IAAI,KAClBC,EAAaP,EAAiB,QAAS,EAAGM,EAAY,QAAO,EAC7D,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAU,EAE9DX,EAAY,YAAciB,EAAgBL,CAAI,EAC9CX,EAAa,YAAcgB,EAAgBJ,CAAK,EAChDX,EAAe,YAAce,EAAgBH,CAAO,EACpDX,EAAe,YAAcc,EAAgBF,CAAO,CACtD,CAEA,SAASC,EAAUE,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAgBE,EAAO,CAC9B,MAAO,GAAGA,CAAK,EACjB,CAEIf,GACW,YAAYK,EAAa,GAAI"}